1. 인덱스 특징과 종류
    ┏ 책의 색인과 비슷
    ┣ 테이블을 기반으로 선택적으로 생성
    ┣ 0 ~ 여러개
    ┣ ★검색 성능의 최적화
    ┗ INSERT, UPDATE, DELETE는 테이블과 인덱스를 함께 변경해서 느려질 수도 있음

    종류
    : B-트리 인덱스, 비트맵 인덱스, 리버스 키 인덱스, 함수기반 인덱스…


    1) B-트리 인덱스
        * 브랜치 블록
            : 분기를 목적으로 하는 블록
            다음 단계의 블록을 가리키는 포인터 가지고 있음
        * 리프 블록
            : 인덱스를 구성하는 칼럼의 데이터와 해당 데이터를 가지고 있는 행의 위치를 가리키는 레코드 식별자(Record Identifier/Rowid, RID)
            양방향 링크 → ASC, DESC

        * 모두 적합
        ├ 일치(=) 검색 Exact Match
        └ 범위(Range) 검색


        순서
        1/ 브랜치 블록의 가장 왼쪽 값이 찾고자 하는 값 이하 
            → 왼쪽 포인터로 이동
        2/ 찾고자 하는 값이 브랜치 블록의 값 사이 
            → 가운데 포인터로 이동
        3/ 오른쪽에 있는 값 초과 
            → 오른쪽 포인터로 이동


    2) SQL Server의 클러스터형 인덱스
        SQL Server: Clustered / Nonclustered

        * 인덱스의 리프 페이지 = 데이터 페이지
            : 리프에는 레코드 식별자 없다
            사전에 비유(ex: 색인은 페이지만 기술, 영단어사전은 뜻이 한번에 나옴)
        * 리프 페이지의 로우(=데이터)는 인덱스 키 칼럼 순으로 물리적 정렬
            : 테이블 로우는 한 가지 순서로만 정렬 가능
            클러스터형 인덱스는 테이블당 하나


2. 전체 테이블 스캔 & 인덱스 스캔

    1) Full table scan
        테이블의 모든 데이터 읽음
        조건에 맞으면 추출, 맞지 않으면 버린다

    2) Index scan
        인덱스를 구성하는 칼럼의 값을 기반으로 데이터 추출
        ├ 인덱스 구성 칼럼의 값
        └ 테이블 레코드 식별자
        
        필요로 하는 칼럼이 인덱스 구성 칼럼에 포함 → 테이블 액세스 X
        인덱스에 존재하지 않는 칼럼의 값 필요 → 레코드 식별자로 테이블 액세스

        * 인덱스 유일 스캔
            : Unique Index 사용해 단 하나의 데이터 추출
            중복 X
            유일 인덱스 구성 칼럼에 대해 모두 =로 값이 주어진 경우엠ㄴ

        * 인덱스 범위 스캔
            : 인덱스를 이용해 한 건 이상의 데이터 추출
            유일 인덱스 구성 칼럼 모두에 대해 =로 값이 주어지지 않은 경우와 비유일 인덱스를 이용하는 모든 액세스 방식

            + 인덱스 역순 범위 스캔
                : 리프 블록의 양방향 링크를 이용해 내림차순으로 읽음
                최대값Max 쉽게 찾음(인덱스 범위 스캔의 일종)
        
